<button type="button" class="btn btn-default back-button" aria-label="Left Align">
  <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
</button>



<h1 style:"margin-top:100px;"> <strong> Comparison Sorts </strong> </h1>


<h2 style="margin-left:100px;"> Insertion Sort O(n^2) </h2>

<div class="src-code" style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #888888">//Basic sorting algo that has best case O(n) time and worst case O(n^2) time, very useful for certain scenarios when knowledge is known</span>
<span style="color: #888888">//about element distribution, such as in bucket sort</span>
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">java.util.Arrays</span><span style="color: #333333">;</span>
<span style="color: #008800; font-weight: bold">public</span> <span style="color: #008800; font-weight: bold">class</span> <span style="color: #BB0066; font-weight: bold">InsertionSort</span><span style="color: #333333">{</span>
	
	<span style="color: #008800; font-weight: bold">public</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> <span style="color: #0066BB; font-weight: bold">sort</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> arr<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #008800; font-weight: bold">for</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">;</span> i<span style="color: #333333">&lt;</span>arr<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">;</span> i<span style="color: #333333">++)</span> <span style="color: #333333">{</span>
			<span style="color: #333399; font-weight: bold">int</span> j <span style="color: #333333">=</span> i<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">;</span>
			<span style="color: #008800; font-weight: bold">while</span><span style="color: #333333">(</span>j<span style="color: #333333">&gt;</span><span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #333333">&amp;&amp;</span> arr<span style="color: #333333">[</span>j<span style="color: #333333">]</span> <span style="color: #333333">&lt;</span> arr<span style="color: #333333">[</span>j<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">])</span> <span style="color: #333333">{</span>
				swap<span style="color: #333333">(</span>arr<span style="color: #333333">,</span> j<span style="color: #333333">,</span> j<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">);</span>
				j<span style="color: #333333">--;</span>
			<span style="color: #333333">}</span>
		<span style="color: #333333">}</span>

		<span style="color: #008800; font-weight: bold">return</span> arr<span style="color: #333333">;</span>
	<span style="color: #333333">}</span>

	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">swap</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> arr<span style="color: #333333">,</span> <span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">,</span> <span style="color: #333399; font-weight: bold">int</span> j<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #333399; font-weight: bold">int</span> tmp <span style="color: #333333">=</span> arr<span style="color: #333333">[</span>i<span style="color: #333333">];</span>
		arr<span style="color: #333333">[</span>i<span style="color: #333333">]</span> <span style="color: #333333">=</span> arr<span style="color: #333333">[</span>j<span style="color: #333333">];</span>
		arr<span style="color: #333333">[</span>j<span style="color: #333333">]</span> <span style="color: #333333">=</span> tmp<span style="color: #333333">;</span>
	<span style="color: #333333">}</span> 


        <span style="color: #008800; font-weight: bold">public</span> <span style="color: #008800; font-weight: bold">static</span> <span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">main</span><span style="color: #333333">(</span>String<span style="color: #333333">[]</span> args<span style="color: #333333">)</span> <span style="color: #333333">{</span>
                InsertionSort s <span style="color: #333333">=</span> <span style="color: #008800; font-weight: bold">new</span> InsertionSort<span style="color: #333333">();</span>
                <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> test <span style="color: #333333">=</span> s<span style="color: #333333">.</span><span style="color: #0000CC">sort</span><span style="color: #333333">(</span><span style="color: #008800; font-weight: bold">new</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]{</span><span style="color: #0000DD; font-weight: bold">33</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">10000</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">5</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">4</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">3</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">,-</span><span style="color: #0000DD; font-weight: bold">50</span><span style="color: #333333">,-</span><span style="color: #0000DD; font-weight: bold">15</span><span style="color: #333333">,-</span><span style="color: #0000DD; font-weight: bold">1234123</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">12341</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">12341</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">23</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">43432</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">2342</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">112</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">234</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">10</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">1003</span><span style="color: #333333">});</span>
                System<span style="color: #333333">.</span><span style="color: #0000CC">out</span><span style="color: #333333">.</span><span style="color: #0000CC">println</span><span style="color: #333333">(</span>Arrays<span style="color: #333333">.</span><span style="color: #0000CC">toString</span><span style="color: #333333">(</span>test<span style="color: #333333">));</span>
        <span style="color: #333333">}</span>   
<span style="color: #333333">}</span>
</pre></div>



<h2 style="margin-left:100px;"> Merge Sort O(nlgn) time O(n) space </h2>


<div class="src-code" style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #888888">//O(nlgn) comparison sort based algorithm that requires O(n) space complexity</span>
<span style="color: #008800; font-weight: bold">public</span> <span style="color: #008800; font-weight: bold">class</span> <span style="color: #BB0066; font-weight: bold">MergeSort</span> <span style="color: #333333">{</span>
  <span style="color: #008800; font-weight: bold">public</span> <span style="color: #008800; font-weight: bold">static</span> <span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">main</span><span style="color: #333333">(</span>String<span style="color: #333333">[]</span> args<span style="color: #333333">)</span> <span style="color: #333333">{</span>
    MergeSort s <span style="color: #333333">=</span> <span style="color: #008800; font-weight: bold">new</span> MergeSort<span style="color: #333333">();</span>
    <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> test <span style="color: #333333">=</span> s<span style="color: #333333">.</span><span style="color: #0000CC">sort</span><span style="color: #333333">(</span><span style="color: #008800; font-weight: bold">new</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]{</span><span style="color: #0000DD; font-weight: bold">5</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">4</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">3</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">,-</span><span style="color: #0000DD; font-weight: bold">50</span><span style="color: #333333">});</span>
    System<span style="color: #333333">.</span><span style="color: #0000CC">out</span><span style="color: #333333">.</span><span style="color: #0000CC">println</span><span style="color: #333333">(</span>Arrays<span style="color: #333333">.</span><span style="color: #0000CC">toString</span><span style="color: #333333">(</span>test<span style="color: #333333">));</span>
  <span style="color: #333333">}</span>
  
  <span style="color: #008800; font-weight: bold">public</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> <span style="color: #0066BB; font-weight: bold">sort</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> arr<span style="color: #333333">)</span> <span style="color: #333333">{</span>
    <span style="color: #008800; font-weight: bold">if</span><span style="color: #333333">(</span>arr<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">&gt;</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">)</span> <span style="color: #333333">{</span>
      <span style="color: #888888">//find mid to divide list</span>
      <span style="color: #333399; font-weight: bold">int</span> mid <span style="color: #333333">=</span> <span style="color: #333333">(</span>arr<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">)/</span><span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">;</span>

      <span style="color: #888888">//create left subsection</span>
      <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> leftArr <span style="color: #333333">=</span> <span style="color: #008800; font-weight: bold">new</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[</span>mid<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">];</span>
        <span style="color: #008800; font-weight: bold">for</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">;</span> i<span style="color: #333333">&lt;</span>mid<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">;</span> i<span style="color: #333333">++){</span>
          leftArr<span style="color: #333333">[</span>i<span style="color: #333333">]</span> <span style="color: #333333">=</span> arr<span style="color: #333333">[</span>i<span style="color: #333333">];</span>
        <span style="color: #333333">}</span>

      <span style="color: #888888">//create right subsection</span>
      <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> rightArr <span style="color: #333333">=</span> <span style="color: #008800; font-weight: bold">new</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[</span>arr<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">-(</span>mid<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">)];</span>
      <span style="color: #008800; font-weight: bold">for</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">;</span> i<span style="color: #333333">&lt;</span>arr<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">-(</span>mid<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">);</span> i<span style="color: #333333">++)</span> <span style="color: #333333">{</span>
        rightArr<span style="color: #333333">[</span>i<span style="color: #333333">]</span> <span style="color: #333333">=</span> arr<span style="color: #333333">[</span>arr<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">-</span>i<span style="color: #333333">];</span>
      <span style="color: #333333">}</span>

      <span style="color: #888888">//make recursive calls with these sections</span>
      <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> left <span style="color: #333333">=</span> sort<span style="color: #333333">(</span>leftArr<span style="color: #333333">);</span>
      <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> right <span style="color: #333333">=</span> sort<span style="color: #333333">(</span>rightArr<span style="color: #333333">);</span>

      <span style="color: #888888">//combine the sorted solutions into final array</span>
      <span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">,</span>j<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">,</span>k<span style="color: #333333">=</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">;</span>

      <span style="color: #888888">//while both contain sorted entries</span>
      <span style="color: #008800; font-weight: bold">while</span><span style="color: #333333">(</span>i <span style="color: #333333">&lt;</span> left<span style="color: #333333">.</span><span style="color: #0000CC">length</span> <span style="color: #333333">&amp;&amp;</span> j<span style="color: #333333">&lt;</span>right<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">)</span> <span style="color: #333333">{</span>
        <span style="color: #008800; font-weight: bold">if</span><span style="color: #333333">(</span>left<span style="color: #333333">[</span>i<span style="color: #333333">]</span> <span style="color: #333333">&lt;</span> right<span style="color: #333333">[</span>j<span style="color: #333333">])</span> <span style="color: #333333">{</span>
          arr<span style="color: #333333">[</span>k<span style="color: #333333">]</span> <span style="color: #333333">=</span> left<span style="color: #333333">[</span>i<span style="color: #333333">];</span>
          i<span style="color: #333333">++;</span>
        <span style="color: #333333">}</span> <span style="color: #008800; font-weight: bold">else</span> <span style="color: #333333">{</span>
          arr<span style="color: #333333">[</span>k<span style="color: #333333">]</span> <span style="color: #333333">=</span> right<span style="color: #333333">[</span>j<span style="color: #333333">];</span>
          j<span style="color: #333333">++;</span>
        <span style="color: #333333">}</span>
        k<span style="color: #333333">++;</span>
      <span style="color: #333333">}</span>

      <span style="color: #888888">//cover case where one is exhausted, but other still has entries</span>
      <span style="color: #008800; font-weight: bold">while</span><span style="color: #333333">(</span>i <span style="color: #333333">&lt;</span> left<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">)</span> <span style="color: #333333">{</span>
        arr<span style="color: #333333">[</span>k<span style="color: #333333">]</span> <span style="color: #333333">=</span> left<span style="color: #333333">[</span>i<span style="color: #333333">];</span>
        i<span style="color: #333333">++;</span>
        k<span style="color: #333333">++;</span>
      <span style="color: #333333">}</span>
      <span style="color: #008800; font-weight: bold">while</span><span style="color: #333333">(</span>j <span style="color: #333333">&lt;</span> right<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">){</span>
        arr<span style="color: #333333">[</span>k<span style="color: #333333">]</span> <span style="color: #333333">=</span> right<span style="color: #333333">[</span>j<span style="color: #333333">];</span>
        j<span style="color: #333333">++;</span>
        k<span style="color: #333333">++;</span>
      <span style="color: #333333">}</span>

      <span style="color: #008800; font-weight: bold">return</span> arr<span style="color: #333333">;</span>

    <span style="color: #333333">}</span> <span style="color: #008800; font-weight: bold">else</span> <span style="color: #333333">{</span>
      <span style="color: #008800; font-weight: bold">return</span> <span style="color: #008800; font-weight: bold">new</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]{</span>arr<span style="color: #333333">[</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">]};</span>
    <span style="color: #333333">}</span>
  <span style="color: #333333">}</span>

<span style="color: #333333">}</span>
</pre></div>


<h2 style="margin-left:100px;"> QuickSort O(n^2) worse, O(nlgn) average, O(1) space </h2>



<div class="src-code" style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #888888">//In-place sorting algorithm with worst case O(n^2) and expected run-time O(nlgn)</span>
<span style="color: #888888">//Quicksort can be improved by choosing a randomized partition element</span>
<span style="color: #888888">//Modified quicksort is O(nlgn) worst case</span>

<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">java.util.Arrays</span><span style="color: #333333">;</span>
<span style="color: #008800; font-weight: bold">public</span> <span style="color: #008800; font-weight: bold">class</span> <span style="color: #BB0066; font-weight: bold">QuickSort</span><span style="color: #333333">{</span>
	<span style="color: #008800; font-weight: bold">public</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> <span style="color: #0066BB; font-weight: bold">sort</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> <span style="color: #333333">[]</span> arr<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #008800; font-weight: bold">return</span> <span style="color: #0066BB; font-weight: bold">quickSort</span><span style="color: #333333">(</span>arr<span style="color: #333333">,</span> <span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">,</span> arr<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">);</span>
	<span style="color: #333333">}</span>

	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> <span style="color: #0066BB; font-weight: bold">quickSort</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> arr<span style="color: #333333">,</span> <span style="color: #333399; font-weight: bold">int</span> start<span style="color: #333333">,</span> <span style="color: #333399; font-weight: bold">int</span> end<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #008800; font-weight: bold">if</span><span style="color: #333333">(</span>start <span style="color: #333333">&lt;</span> end<span style="color: #333333">)</span> <span style="color: #333333">{</span>	
			<span style="color: #333399; font-weight: bold">int</span> partition <span style="color: #333333">=</span> nonRandomPartition<span style="color: #333333">(</span>arr<span style="color: #333333">,</span> start<span style="color: #333333">,</span> end<span style="color: #333333">);</span>
			quickSort<span style="color: #333333">(</span>arr<span style="color: #333333">,</span> start<span style="color: #333333">,</span> partition<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">);</span>
			quickSort<span style="color: #333333">(</span>arr<span style="color: #333333">,</span> partition<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">,</span> end<span style="color: #333333">);</span>
		<span style="color: #333333">}</span>
		<span style="color: #008800; font-weight: bold">return</span> arr<span style="color: #333333">;</span>
	<span style="color: #333333">}</span>

	<span style="color: #888888">//choose a partition (in this instance the last element of the section) and arrange elements around partition in linear time</span>
	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">int</span> <span style="color: #0066BB; font-weight: bold">nonRandomPartition</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> arr<span style="color: #333333">,</span> <span style="color: #333399; font-weight: bold">int</span> start<span style="color: #333333">,</span> <span style="color: #333399; font-weight: bold">int</span> end<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #888888">//choose partition element</span>
		<span style="color: #333399; font-weight: bold">int</span> partition <span style="color: #333333">=</span> arr<span style="color: #333333">[</span>end<span style="color: #333333">];</span>
		<span style="color: #333399; font-weight: bold">int</span> j <span style="color: #333333">=</span> start<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">;</span>

		<span style="color: #888888">//all elements lower than the partition will be placed left of the partition</span>
		<span style="color: #008800; font-weight: bold">for</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span>start<span style="color: #333333">;</span>i<span style="color: #333333">&lt;</span>end<span style="color: #333333">;</span>i<span style="color: #333333">++)</span> <span style="color: #333333">{</span>
			<span style="color: #008800; font-weight: bold">if</span><span style="color: #333333">(</span>arr<span style="color: #333333">[</span>i<span style="color: #333333">]&lt;=</span>partition<span style="color: #333333">)</span> <span style="color: #333333">{</span>
				j<span style="color: #333333">++;</span>
				swap<span style="color: #333333">(</span>arr<span style="color: #333333">,</span> j<span style="color: #333333">,</span> i<span style="color: #333333">);</span>
			<span style="color: #333333">}</span>
		<span style="color: #333333">}</span>

		<span style="color: #888888">//finally the actual partition will </span>
		swap<span style="color: #333333">(</span>arr<span style="color: #333333">,</span> j<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">,</span> end<span style="color: #333333">);</span>
		<span style="color: #008800; font-weight: bold">return</span> j<span style="color: #333333">+</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">;</span>
	<span style="color: #333333">}</span>

	<span style="color: #888888">//swap values at two indices of the given array</span>
	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">swap</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> arr<span style="color: #333333">,</span> <span style="color: #333399; font-weight: bold">int</span> i1<span style="color: #333333">,</span> <span style="color: #333399; font-weight: bold">int</span> i2<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #333399; font-weight: bold">int</span> tmp <span style="color: #333333">=</span> arr<span style="color: #333333">[</span>i2<span style="color: #333333">];</span>
		arr<span style="color: #333333">[</span>i2<span style="color: #333333">]</span> <span style="color: #333333">=</span> arr<span style="color: #333333">[</span>i1<span style="color: #333333">];</span>
		arr<span style="color: #333333">[</span>i1<span style="color: #333333">]</span> <span style="color: #333333">=</span> tmp<span style="color: #333333">;</span>
	<span style="color: #333333">}</span>



  <span style="color: #008800; font-weight: bold">public</span> <span style="color: #008800; font-weight: bold">static</span> <span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">main</span><span style="color: #333333">(</span>String<span style="color: #333333">[]</span> args<span style="color: #333333">)</span> <span style="color: #333333">{</span>
    QuickSort s <span style="color: #333333">=</span> <span style="color: #008800; font-weight: bold">new</span> QuickSort<span style="color: #333333">();</span>
    <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]</span> test <span style="color: #333333">=</span> s<span style="color: #333333">.</span><span style="color: #0000CC">sort</span><span style="color: #333333">(</span><span style="color: #008800; font-weight: bold">new</span> <span style="color: #333399; font-weight: bold">int</span><span style="color: #333333">[]{</span><span style="color: #0000DD; font-weight: bold">33</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">10000</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">5</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">4</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">3</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">,-</span><span style="color: #0000DD; font-weight: bold">50</span><span style="color: #333333">});</span>
    System<span style="color: #333333">.</span><span style="color: #0000CC">out</span><span style="color: #333333">.</span><span style="color: #0000CC">println</span><span style="color: #333333">(</span>Arrays<span style="color: #333333">.</span><span style="color: #0000CC">toString</span><span style="color: #333333">(</span>test<span style="color: #333333">));</span>
  <span style="color: #333333">}</span>
</pre></div>



<h2 style="margin-left:100px;"> Heap Sort O(nlgn) time and O(1) space</h2>


<div class="src-code" style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #888888">/* Utilizing a max-heap to do O(nlgn) in-place sorting of a given array. We could have implemented this in the min heap example as well by reversing the final array. Conceptually, the functions are exactly the same as the max heap example (file in this same directory) including the complexity analyses */</span>
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">java.util.Arrays</span><span style="color: #333333">;</span>
<span style="color: #008800; font-weight: bold">public</span> <span style="color: #008800; font-weight: bold">class</span> <span style="color: #BB0066; font-weight: bold">HeapSort</span><span style="color: #333333">&lt;</span>T <span style="color: #008800; font-weight: bold">extends</span> Comparable<span style="color: #333333">&lt;</span>T<span style="color: #333333">&gt;&gt;</span> <span style="color: #333333">{</span>
	<span style="color: #008800; font-weight: bold">private</span> T<span style="color: #333333">[]</span> container<span style="color: #333333">;</span>
	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">int</span> heapSize<span style="color: #333333">;</span>

	<span style="color: #008800; font-weight: bold">public</span> <span style="color: #0066BB; font-weight: bold">HeapSort</span><span style="color: #333333">()</span> <span style="color: #333333">{</span>
		container <span style="color: #333333">=</span> <span style="color: #008800; font-weight: bold">null</span><span style="color: #333333">;</span>
	<span style="color: #333333">}</span>

	<span style="color: #888888">//returns left child if it exists</span>
	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">int</span> <span style="color: #0066BB; font-weight: bold">getLeftChild</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #008800; font-weight: bold">return</span> <span style="color: #333333">((</span>i<span style="color: #333333">*</span><span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">&lt;=</span>heapSize<span style="color: #333333">)</span> <span style="color: #333333">?</span> i<span style="color: #333333">*</span><span style="color: #0000DD; font-weight: bold">2</span> <span style="color: #333333">:</span> <span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">);</span> 
	<span style="color: #333333">}</span>

	<span style="color: #888888">//return right child if it exists</span>
	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">int</span> <span style="color: #0066BB; font-weight: bold">getRightChild</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #008800; font-weight: bold">return</span> <span style="color: #333333">((</span>i<span style="color: #333333">*</span><span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">)+</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">&lt;=</span>heapSize<span style="color: #333333">)</span> <span style="color: #333333">?</span> <span style="color: #333333">(</span>i<span style="color: #333333">*</span><span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">)+</span><span style="color: #0000DD; font-weight: bold">1</span> <span style="color: #333333">:</span> <span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">;</span>
	<span style="color: #333333">}</span>

	<span style="color: #888888">//swaps the indices of two given heap values</span>
	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">swap</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> v1<span style="color: #333333">,</span> <span style="color: #333399; font-weight: bold">int</span> v2<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		T data <span style="color: #333333">=</span> container<span style="color: #333333">[</span>v1<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">];</span>
		container<span style="color: #333333">[</span>v1<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">]</span> <span style="color: #333333">=</span> container<span style="color: #333333">[</span>v2<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">];</span>
		container<span style="color: #333333">[</span>v2<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">]</span> <span style="color: #333333">=</span> data<span style="color: #333333">;</span>
	<span style="color: #333333">}</span>

	<span style="color: #888888">//percolates the heap index down to maintain max-heap structure</span>
	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">maxHeapify</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #008800; font-weight: bold">if</span><span style="color: #333333">(</span>container <span style="color: #333333">!=</span> <span style="color: #008800; font-weight: bold">null</span><span style="color: #333333">)</span> <span style="color: #333333">{</span>
			<span style="color: #333399; font-weight: bold">int</span> lc <span style="color: #333333">=</span> getLeftChild<span style="color: #333333">(</span>i<span style="color: #333333">);</span>
			<span style="color: #333399; font-weight: bold">int</span> rc <span style="color: #333333">=</span> getRightChild<span style="color: #333333">(</span>i<span style="color: #333333">);</span>
			<span style="color: #333399; font-weight: bold">int</span> max<span style="color: #333333">;</span>
			<span style="color: #008800; font-weight: bold">if</span><span style="color: #333333">(</span>lc <span style="color: #333333">!=</span> <span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span> <span style="color: #333333">&amp;&amp;</span> <span style="color: #333333">(</span>container<span style="color: #333333">[</span>i<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">].</span><span style="color: #0000CC">compareTo</span><span style="color: #333333">(</span>container<span style="color: #333333">[</span>lc<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">])</span> <span style="color: #333333">&lt;</span> <span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">)</span> <span style="color: #333333">)</span> <span style="color: #333333">{</span>
				max <span style="color: #333333">=</span> lc<span style="color: #333333">;</span>	
				
			<span style="color: #333333">}</span> <span style="color: #008800; font-weight: bold">else</span> <span style="color: #333333">{</span>
				max <span style="color: #333333">=</span> i<span style="color: #333333">;</span>
			<span style="color: #333333">}</span>
			
			<span style="color: #008800; font-weight: bold">if</span><span style="color: #333333">(</span>rc <span style="color: #333333">!=</span> <span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span> <span style="color: #333333">&amp;&amp;</span> <span style="color: #333333">(</span>container<span style="color: #333333">[</span>max<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">].</span><span style="color: #0000CC">compareTo</span><span style="color: #333333">(</span>container<span style="color: #333333">[</span>rc<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">])</span> <span style="color: #333333">&lt;</span> <span style="color: #0000DD; font-weight: bold">0</span> <span style="color: #333333">))</span> <span style="color: #333333">{</span>
				max <span style="color: #333333">=</span> rc<span style="color: #333333">;</span>	
			<span style="color: #333333">}</span>

			<span style="color: #008800; font-weight: bold">if</span><span style="color: #333333">(</span>i<span style="color: #333333">!=</span>max<span style="color: #333333">)</span> <span style="color: #333333">{</span>
				swap<span style="color: #333333">(</span>i<span style="color: #333333">,</span> max<span style="color: #333333">);</span>
				maxHeapify<span style="color: #333333">(</span>max<span style="color: #333333">);</span>
			<span style="color: #333333">}</span>
		<span style="color: #333333">}</span>
	<span style="color: #333333">}</span>

	<span style="color: #888888">//heap is empty even if elements live in the array because we track the heap within the array</span>
	<span style="color: #008800; font-weight: bold">private</span> <span style="color: #333399; font-weight: bold">boolean</span> <span style="color: #0066BB; font-weight: bold">isEmpty</span><span style="color: #333333">()</span> <span style="color: #333333">{</span>
		<span style="color: #008800; font-weight: bold">return</span>	<span style="color: #008800; font-weight: bold">this</span><span style="color: #333333">.</span><span style="color: #0000CC">heapSize</span> <span style="color: #333333">==</span> <span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">;</span>
	<span style="color: #333333">}</span>

	<span style="color: #888888">//takes out the root and replaces it with the last element (smallest) in the heap, then percolates that down</span>
	<span style="color: #008800; font-weight: bold">private</span> T <span style="color: #0066BB; font-weight: bold">extractMax</span><span style="color: #333333">()</span> <span style="color: #333333">{</span>
		T data <span style="color: #333333">=</span> container<span style="color: #333333">[</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">];</span>
		container<span style="color: #333333">[</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">]</span> <span style="color: #333333">=</span> container<span style="color: #333333">[</span>heapSize<span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">];</span>
		heapSize<span style="color: #333333">--;</span>
		maxHeapify<span style="color: #333333">(</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">);</span>
		<span style="color: #008800; font-weight: bold">return</span> data<span style="color: #333333">;</span>
	<span style="color: #333333">}</span>

	<span style="color: #888888">/* Selects the last non leaf and heapifys from there down... No need to start at the leaves because a node alone</span>
<span style="color: #888888">	 * is already in the max heap structure, so only the nodes which have subtrees need to be heapified O(n) */</span>	
	<span style="color: #008800; font-weight: bold">private</span> T<span style="color: #333333">[]</span> <span style="color: #0066BB; font-weight: bold">buildMaxHeap</span><span style="color: #333333">()</span> <span style="color: #333333">{</span>
		<span style="color: #333399; font-weight: bold">int</span> lastNonLeaf <span style="color: #333333">=</span> <span style="color: #333333">(</span>container<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">/</span><span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">);</span>
		<span style="color: #008800; font-weight: bold">for</span><span style="color: #333333">(</span><span style="color: #333399; font-weight: bold">int</span> i<span style="color: #333333">=</span>lastNonLeaf<span style="color: #333333">;</span> i<span style="color: #333333">&gt;</span><span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">;</span> i<span style="color: #333333">--)</span> <span style="color: #333333">{</span>
			maxHeapify<span style="color: #333333">(</span>i<span style="color: #333333">);</span>
		<span style="color: #333333">}</span>

		<span style="color: #008800; font-weight: bold">return</span> container<span style="color: #333333">;</span>
	<span style="color: #333333">}</span>


	<span style="color: #888888">/* Turns unsorted array into a heap O(nlgn) then repeatedly extracts max to create a sorted array O(n)</span>
<span style="color: #888888">	 * Runtime analysis: O(nlgn)</span>
<span style="color: #888888">	 */</span>
	<span style="color: #008800; font-weight: bold">public</span> T<span style="color: #333333">[]</span> <span style="color: #0066BB; font-weight: bold">sort</span><span style="color: #333333">(</span>T<span style="color: #333333">[]</span> unsorted<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		<span style="color: #888888">//note that we are not redeclaring a new array; this algorithm is in-place, heap below is a pointer</span>
		heapSize <span style="color: #333333">=</span> unsorted<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">;</span>
		container <span style="color: #333333">=</span> unsorted<span style="color: #333333">;</span>
		<span style="color: #333399; font-weight: bold">int</span> itemsInputted <span style="color: #333333">=</span> <span style="color: #0000DD; font-weight: bold">0</span><span style="color: #333333">;</span>
		buildMaxHeap<span style="color: #333333">();</span>
		<span style="color: #008800; font-weight: bold">while</span><span style="color: #333333">(!</span>isEmpty<span style="color: #333333">())</span> <span style="color: #333333">{</span>
			T data <span style="color: #333333">=</span> extractMax<span style="color: #333333">();</span>
			container<span style="color: #333333">[(</span>container<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">-</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">)-</span>itemsInputted<span style="color: #333333">]</span> <span style="color: #333333">=</span> data<span style="color: #333333">;</span>
			itemsInputted<span style="color: #333333">++;</span>
		<span style="color: #333333">}</span>

		<span style="color: #008800; font-weight: bold">return</span> container<span style="color: #333333">;</span>
	<span style="color: #333333">}</span>


	<span style="color: #008800; font-weight: bold">public</span> <span style="color: #008800; font-weight: bold">static</span> <span style="color: #333399; font-weight: bold">void</span> <span style="color: #0066BB; font-weight: bold">main</span><span style="color: #333333">(</span>String<span style="color: #333333">[]</span> args<span style="color: #333333">)</span> <span style="color: #333333">{</span>
		HeapSort<span style="color: #333333">&lt;</span>Integer<span style="color: #333333">&gt;</span> h <span style="color: #333333">=</span> <span style="color: #008800; font-weight: bold">new</span> HeapSort<span style="color: #333333">&lt;</span>Integer<span style="color: #333333">&gt;();</span>
		Integer<span style="color: #333333">[]</span> unsorted <span style="color: #333333">=</span> <span style="color: #333333">{</span><span style="color: #0000DD; font-weight: bold">500</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">400</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">300</span><span style="color: #333333">,-</span><span style="color: #0000DD; font-weight: bold">300</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">800</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">1</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">2</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">3</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">100000</span><span style="color: #333333">,-</span><span style="color: #0000DD; font-weight: bold">1000000</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">93</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">43</span><span style="color: #333333">,-</span><span style="color: #0000DD; font-weight: bold">1023</span><span style="color: #333333">,</span><span style="color: #0000DD; font-weight: bold">984</span><span style="color: #333333">};</span>
		Integer<span style="color: #333333">[]</span> sorted <span style="color: #333333">=</span> h<span style="color: #333333">.</span><span style="color: #0000CC">sort</span><span style="color: #333333">(</span>unsorted<span style="color: #333333">);</span>
		Integer<span style="color: #333333">[]</span> sorted2 <span style="color: #333333">=</span> Arrays<span style="color: #333333">.</span><span style="color: #0000CC">copyOf</span><span style="color: #333333">(</span>unsorted<span style="color: #333333">,</span>unsorted<span style="color: #333333">.</span><span style="color: #0000CC">length</span><span style="color: #333333">);</span>
		Arrays<span style="color: #333333">.</span><span style="color: #0000CC">sort</span><span style="color: #333333">(</span>sorted2<span style="color: #333333">);</span>
		<span style="color: #333399; font-weight: bold">boolean</span> passedTest <span style="color: #333333">=</span> <span style="color: #333333">(</span>Arrays<span style="color: #333333">.</span><span style="color: #0000CC">deepEquals</span><span style="color: #333333">(</span>sorted<span style="color: #333333">,</span>sorted2<span style="color: #333333">));</span>
		String passedMessage <span style="color: #333333">=</span> passedTest <span style="color: #333333">?</span> <span style="background-color: #fff0f0">&quot;Congrats you did heap sort&quot;</span> <span style="color: #333333">:</span> <span style="background-color: #fff0f0">&quot;boo - you failed&quot;</span><span style="color: #333333">;</span>
		System<span style="color: #333333">.</span><span style="color: #0000CC">out</span><span style="color: #333333">.</span><span style="color: #0000CC">println</span><span style="color: #333333">(</span>passedMessage<span style="color: #333333">);</span>
	<span style="color: #333333">}</span>
<span style="color: #333333">}</span>
</pre></div>

